from sklearn.grid_search import GridSearchCV 
from sklearn.svm import SVC
#from modules.socialevent.classification.GroundTruth import GroundTruth
from modules.classification.Annotation import Annotation
import os
import pickle

class Trainer:
    
    def __init__(self, pathDirFeatures, annotationFile, flagVerbose=False ):
                    
        self.pathDirFeatures = pathDirFeatures        
        self.annotation = annotationFile
        self.flagVerbose = flagVerbose
        
        self.best_params_ = ' '
        self.best_score_ = 0.0
        self.best_estimator_ = ' '
                
    def loadData( self, pathTxtFile ):
        
        if self.flagVerbose:
            print 'Reading images from ' + pathTxtFile + "..."
        
        # Read the file containing the image IDs
        fileDataset = open( pathTxtFile, 'r')
        
        # Read lines from the text file, stripping the end of line character
        imageIds = [line.strip() for line in fileDataset ]
        
        # Close file
        fileDataset.close()
        
         # Define the lists of features vectors and class labels
        featureVectors = []
        labels = []
        labelType = 1
        # For each provided image ID...
        
        for imageId in imageIds:
        
                # Load feature vector
                pathFile = os.path.join( self.pathDirFeatures, imageId + '.p')
                featureVector = pickle.load( open( pathFile, "rb" ) )
                #featureVectors.append(featureVector)
                
                # Load label
                print "_classes: " , self.annotation.getAnnotatedClasses(1,imageId)
                for _class in self.annotation.getAnnotatedClasses(1,imageId):
                    print "labelType: ",labelType,"imageId: ",imageId
                    print featureVector>0
                    print "class: ", _class
                    featureVectors.append(featureVector)
                    labels.append(_class)
                
                #print self.gt.event_belongs_id(imageId)
                
        return featureVectors,labels

    
    def run(self, pathTxtFile ):
        
        # Load training data into memory
        featureVectors, labels = self.loadData( pathTxtFile )        
        
        
#==============================================================================
#         X,Y = self.load_hist_and_create_trainer(hist_directory)
#          print "hist", featureVectors
#          print "labels", labels
#         print " he carregat els histogrames "
#==============================================================================
        #Define parameters to be tested with SVM
        #tuned_parameters = [{'kernel': ['rbf'], 'gamma': [0.001,0.002,0.004,0.006,0.008,0.01,0.02,0.04,0.06,0.08,0.1,0.2,0.4,0.6,0.8,1,5,10], 'C': [1,1.5,2,3,4,5,6,7,8,9,10]}, {'kernel': ['linear'], 'C': [1,1.5,2,3,4,5,6,7,8,9,10]}] 
        #tuned_parameters = [{'kernel': ['linear'], 'C': [1,1.5,2,3,4,5,6,7,8,9,10]}]
        tuned_parameters = [{'kernel': ['rbf'], 'gamma': [0.001], 'C': [10000]}]
        #Tune SVM
        #clf = GridSearchCV(SVC(),param_grid=tuned_parameters, cv=5,scoring='accuracy')
        clf = GridSearchCV(SVC(),param_grid=tuned_parameters,scoring='accuracy')
        print " he creat el GridSearch"
        print labels
        clf.fit(featureVectors, labels) #Fit classifier to data
        
        #Define parameters for ECOC coding
        #tuned_parameters= [{'code_size': [5,10,15,20,25,30,35,40,60,80,100,200]}] 
        #Define the classifier - Error correcting output codes (multiclass) ECOC
        #classifier=OutputCodeClassifier(estimator=clf.best_estimator_) 
        #Tune ECOC with the parameters using 5-fold cross validation
        #clf = GridSearchCV(classifier,param_grid=tuned_parameters, cv=5,scoring='accuracy') 
        #Fit to data
        #clf.fit(X, Y) 
       # print "he fet el fit"
        
        # Save the best parameters
        self.best_params_ = clf.best_params_
        self.best_score_ = clf.best_score_
        self.best_estimator_ = clf.best_estimator_
        
        return clf.best_params_, clf.best_score_, clf.best_estimator_ 
        
    def save_model_to_disk( self, savepath, model_name = 'model_svm.p'):
        
        pathFileModel = os.path.join( savepath, model_name )
        pickle.dump(self.best_estimator_, open( pathFileModel ,'wb'))
    

                     
# Main
if __name__ == "__main__":

    # Point to the local path where the ground truth and metadata are stored
    HOME = os.path.expanduser('~')
    DATASETS_PATH = HOME+'/work/mediaeval/2013-sed/classification/2_datasets'
    TRAIN_IMAGE_PATH = HOME+'/work/mediaeval/2013-sed/classification/4_bof/train'
    TRAIN_TAGS_PATH = HOME+'/work/mediaeval/2013-sed/classification/4_tfidf/train'
    GROUND_TRUTH_FILE = 'sed2013_task2_dataset_train_gs.csv'
    annotationFile = 'annotation.p'
    # Load the metadata
    gtPath = os.path.join(DATASETS_PATH, GROUND_TRUTH_FILE)
    
    trainer = Trainer(TRAIN_TAGS_PATH, annotationFile)
